server:
  port: 8080
  readTimeout: 15
  writeTimeout: 15

metrics:
  enabled: true
  port: 9090
  path: "/metrics"

auth:
  enabled: false
  # IMPORTANT: Use a strong, randomly generated secret and manage it securely (e.g., via environment variables or a vault).
  jwtSecret: "AyAPpHYGt5aQ32uB"
  tokenQueryParam: "token"
  revocationListKey: "dev:jwt:revoked"

broker:
  type: "redis"
  redis:
    address: "localhost:6379"
    password: ""
    db: 0
    poolSize: 1000
    channels:
      inbound: "dev:ws:inbound"
      outbound: "dev:ws:outbound"
      system: "dev:ws:system"
      connection: "dev:ws:connections"
  kafka:
    brokers: ["localhost:9092"]
    groupID: "websocket-pooler"

websocket:
  maxConnections: 10000
  messageSizeLimit: 4096
  handshakeTimeout: 10   # ADDED: Max time in seconds for the initial WebSocket handshake to complete.
  pingInterval: 5        # Time in seconds between server-sent ping messages.
  pongTimeout: 10        # ADDED: Max time in seconds to wait for a pong response from the client. Should be > pingInterval.
  activityTimeout: 3600  # Time in seconds of client inactivity before the connection is closed. (1 hour)
  writeTimeout: 5        # ADDED: Max time in seconds allowed for a single write operation to the client.
  reconnectBackoff: 500
  maxRetries: 3
  keepAlive: true
  sessionTTL: 3660       # ADDED: Time in seconds for the session to live in Redis. It MUST be greater than activityTimeout.
